datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
  // Uncomment the following lines if you're using another database provider
  // provider = "mysql"
  // url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id             Int            @id @default(autoincrement())
  name           String
  email          String         @unique
  password       String
  bio            String?
  heightCm        Float?          // Store height in centimeters
  gender          String?
  isOnline        Boolean         @default(false)
  lastActiveAt    DateTime?
  accountStatus   String          @default("active") // e.g., active, suspended

  avatars        Avatar[]
  location       Location?      @relation(fields: [locationId], references: [id])
  locationId     Int?
  likesGiven     Like[]         @relation("LikesGiven")
  likesReceived  Like[]         @relation("LikesReceived")
  notifications  Notification[]
  messagesSent   Message[]      @relation("SentMessages")
  messagesReceived Message[]    @relation("ReceivedMessages")
}

model Avatar {
  id        Int    @id @default(autoincrement())
  url       String
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
}

model Location {
  id         Int     @id @default(autoincrement())
  latitude   Float
  longitude  Float
  placeName  String?
  user       User[]
}

model Like {
  id        Int      @id @default(autoincrement())
  likerId   Int
  likedId   Int
  createdAt DateTime @default(now())
  liker     User     @relation("LikesGiven", fields: [likerId], references: [id])
  liked     User     @relation("LikesReceived", fields: [likedId], references: [id])

  @@unique([likerId, likedId])
}

model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int
  type        String    // e.g., "like", "message", "follow"
  referenceId Int       // Can be a foreign key to Like, Message, etc.
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  readAt      DateTime? // Optional: Track when the notification was read
  user        User      @relation(fields: [userId], references: [id])
}

model Message {
  id          Int       @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  content     String
  createdAt   DateTime  @default(now())
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@index([senderId, receiverId])
}
